class Product {
  List<Categories>? categories;
  Features? features;
  String? keyword;
  List<Products>? products;
  List<Refinements>? refinements;
  String? responseSource;
  int? totalProducts;
  String? userSegment;

  Product(
      {this.categories,
      this.features,
      this.keyword,
      this.products,
      this.refinements,
      this.responseSource,
      this.totalProducts,
      this.userSegment});

  Product.fromJson(Map<String, dynamic> json) {
    if (json['categories'] != null) {
      categories = <Categories>[];
      json['categories'].forEach((v) {
        categories!.add(new Categories.fromJson(v));
      });
    }
    features = json['features'] != null
        ? new Features.fromJson(json['features'])
        : null;
    keyword = json['keyword'];
    if (json['products'] != null) {
      products = <Products>[];
      json['products'].forEach((v) {
        products!.add(new Products.fromJson(v));
      });
    }
    if (json['refinements'] != null) {
      refinements = <Refinements>[];
      json['refinements'].forEach((v) {
        refinements!.add(new Refinements.fromJson(v));
      });
    }
    responseSource = json['responseSource'];
    totalProducts = json['totalProducts'];
    userSegment = json['userSegment'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.categories != null) {
      data['categories'] = this.categories!.map((v) => v.toJson()).toList();
    }
    if (this.features != null) {
      data['features'] = this.features!.toJson();
    }
    data['keyword'] = this.keyword;
    if (this.products != null) {
      data['products'] = this.products!.map((v) => v.toJson()).toList();
    }
    if (this.refinements != null) {
      data['refinements'] = this.refinements!.map((v) => v.toJson()).toList();
    }
    data['responseSource'] = this.responseSource;
    data['totalProducts'] = this.totalProducts;
    data['userSegment'] = this.userSegment;
    return data;
  }
}

class Categories {
  String? displayName;
  String? level;
  String? nodeStr;
  String? recordCount;

  Categories({this.displayName, this.level, this.nodeStr, this.recordCount});

  Categories.fromJson(Map<String, dynamic> json) {
    displayName = json['displayName'];
    level = json['level'];
    nodeStr = json['nodeStr'];
    recordCount = json['recordCount'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['displayName'] = this.displayName;
    data['level'] = this.level;
    data['nodeStr'] = this.nodeStr;
    data['recordCount'] = this.recordCount;
    return data;
  }
}

class Features {
  bool? aATest;
  bool? autoGeneratedRefinedQueryRules;
  bool? customAutosuggestUi;
  bool? disableTestOnlyGlobalRulesBrowse;
  bool? disableTestOnlyGlobalRulesSearch;
  bool? filterItems;
  bool? manualSearchandizing;
  bool? personalization;
  bool? queryItems;
  bool? recommendationsBestsellers;
  bool? recommendationsExcludeInteractedItems;
  bool? useCognitiveEmbeddings;
  bool? useEnrichedAttributesAsFuzzySearchable;
  bool? useGlobalHistoryRead;
  bool? useGlobalHistoryWrite;
  bool? useRerankerServiceForAll;
  bool? useRerankerServiceForBrowse;
  bool? useRerankerServiceForSearch;

  Features(
      {this.aATest,
      this.autoGeneratedRefinedQueryRules,
      this.customAutosuggestUi,
      this.disableTestOnlyGlobalRulesBrowse,
      this.disableTestOnlyGlobalRulesSearch,
      this.filterItems,
      this.manualSearchandizing,
      this.personalization,
      this.queryItems,
      this.recommendationsBestsellers,
      this.recommendationsExcludeInteractedItems,
      this.useCognitiveEmbeddings,
      this.useEnrichedAttributesAsFuzzySearchable,
      this.useGlobalHistoryRead,
      this.useGlobalHistoryWrite,
      this.useRerankerServiceForAll,
      this.useRerankerServiceForBrowse,
      this.useRerankerServiceForSearch});

  Features.fromJson(Map<String, dynamic> json) {
    aATest = json['a_a_test'];
    autoGeneratedRefinedQueryRules = json['auto_generated_refined_query_rules'];
    customAutosuggestUi = json['custom_autosuggest_ui'];
    disableTestOnlyGlobalRulesBrowse =
        json['disable_test_only_global_rules_browse'];
    disableTestOnlyGlobalRulesSearch =
        json['disable_test_only_global_rules_search'];
    filterItems = json['filter_items'];
    manualSearchandizing = json['manual_searchandizing'];
    personalization = json['personalization'];
    queryItems = json['query_items'];
    recommendationsBestsellers = json['recommendations_bestsellers'];
    recommendationsExcludeInteractedItems =
        json['recommendations_exclude_interacted_items'];
    useCognitiveEmbeddings = json['use_cognitive_embeddings'];
    useEnrichedAttributesAsFuzzySearchable =
        json['use_enriched_attributes_as_fuzzy_searchable'];
    useGlobalHistoryRead = json['use_global_history_read'];
    useGlobalHistoryWrite = json['use_global_history_write'];
    useRerankerServiceForAll = json['use_reranker_service_for_all'];
    useRerankerServiceForBrowse = json['use_reranker_service_for_browse'];
    useRerankerServiceForSearch = json['use_reranker_service_for_search'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['a_a_test'] = this.aATest;
    data['auto_generated_refined_query_rules'] =
        this.autoGeneratedRefinedQueryRules;
    data['custom_autosuggest_ui'] = this.customAutosuggestUi;
    data['disable_test_only_global_rules_browse'] =
        this.disableTestOnlyGlobalRulesBrowse;
    data['disable_test_only_global_rules_search'] =
        this.disableTestOnlyGlobalRulesSearch;
    data['filter_items'] = this.filterItems;
    data['manual_searchandizing'] = this.manualSearchandizing;
    data['personalization'] = this.personalization;
    data['query_items'] = this.queryItems;
    data['recommendations_bestsellers'] = this.recommendationsBestsellers;
    data['recommendations_exclude_interacted_items'] =
        this.recommendationsExcludeInteractedItems;
    data['use_cognitive_embeddings'] = this.useCognitiveEmbeddings;
    data['use_enriched_attributes_as_fuzzy_searchable'] =
        this.useEnrichedAttributesAsFuzzySearchable;
    data['use_global_history_read'] = this.useGlobalHistoryRead;
    data['use_global_history_write'] = this.useGlobalHistoryWrite;
    data['use_reranker_service_for_all'] = this.useRerankerServiceForAll;
    data['use_reranker_service_for_browse'] = this.useRerankerServiceForBrowse;
    data['use_reranker_service_for_search'] = this.useRerankerServiceForSearch;
    return data;
  }
}

class Products {
  String? brandName;
  CurrentSku? currentSku;
  String? displayName;
  String? heroImage;
  String? image135;
  String? image250;
  String? image450;
  String? altImage;
  int? moreColors;
  String? onSaleData;
  bool? pickupEligible;
  String? productId;
  String? productName;
  String? rating;
  String? reviews;
  bool? sameDayEligible;
  bool? shipToHomeEligible;
  String? targetUrl;
  String? url;
  bool? sponsored;
  String? impressionTracker;
  String? impressionPayload;
  String? clickTracker;
  String? impressionId;
  String? clickPayload;
  String? viewableImpressionPayload;
  String? onloadPayload;
  String? wishlistPayload;
  String? basketPayload;

  Products(
      {this.brandName,
      this.currentSku,
      this.displayName,
      this.heroImage,
      this.image135,
      this.image250,
      this.image450,
      this.altImage,
      this.moreColors,
      this.onSaleData,
      this.pickupEligible,
      this.productId,
      this.productName,
      this.rating,
      this.reviews,
      this.sameDayEligible,
      this.shipToHomeEligible,
      this.targetUrl,
      this.url,
      this.sponsored,
      this.impressionTracker,
      this.impressionPayload,
      this.clickTracker,
      this.impressionId,
      this.clickPayload,
      this.viewableImpressionPayload,
      this.onloadPayload,
      this.wishlistPayload,
      this.basketPayload});

  Products.fromJson(Map<String, dynamic> json) {
    brandName = json['brandName'];
    currentSku = json['currentSku'] != null
        ? new CurrentSku.fromJson(json['currentSku'])
        : null;
    displayName = json['displayName'];
    heroImage = json['heroImage'];
    image135 = json['image135'];
    image250 = json['image250'];
    image450 = json['image450'];
    altImage = json['altImage'];
    moreColors = json['moreColors'];
    onSaleData = json['onSaleData'];
    pickupEligible = json['pickupEligible'];
    productId = json['productId'];
    productName = json['productName'];
    rating = json['rating'];
    reviews = json['reviews'];
    sameDayEligible = json['sameDayEligible'];
    shipToHomeEligible = json['shipToHomeEligible'];
    targetUrl = json['targetUrl'];
    url = json['url'];
    sponsored = json['sponsored'];
    impressionTracker = json['impression_tracker'];
    impressionPayload = json['impression_payload'];
    clickTracker = json['click_tracker'];
    impressionId = json['impression_id'];
    clickPayload = json['click_payload'];
    viewableImpressionPayload = json['viewable_impression_payload'];
    onloadPayload = json['onload_payload'];
    wishlistPayload = json['wishlist_payload'];
    basketPayload = json['basket_payload'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['brandName'] = this.brandName;
    if (this.currentSku != null) {
      data['currentSku'] = this.currentSku!.toJson();
    }
    data['displayName'] = this.displayName;
    data['heroImage'] = this.heroImage;
    data['image135'] = this.image135;
    data['image250'] = this.image250;
    data['image450'] = this.image450;
    data['altImage'] = this.altImage;
    data['moreColors'] = this.moreColors;
    data['onSaleData'] = this.onSaleData;
    data['pickupEligible'] = this.pickupEligible;
    data['productId'] = this.productId;
    data['productName'] = this.productName;
    data['rating'] = this.rating;
    data['reviews'] = this.reviews;
    data['sameDayEligible'] = this.sameDayEligible;
    data['shipToHomeEligible'] = this.shipToHomeEligible;
    data['targetUrl'] = this.targetUrl;
    data['url'] = this.url;
    data['sponsored'] = this.sponsored;
    data['impression_tracker'] = this.impressionTracker;
    data['impression_payload'] = this.impressionPayload;
    data['click_tracker'] = this.clickTracker;
    data['impression_id'] = this.impressionId;
    data['click_payload'] = this.clickPayload;
    data['viewable_impression_payload'] = this.viewableImpressionPayload;
    data['onload_payload'] = this.onloadPayload;
    data['wishlist_payload'] = this.wishlistPayload;
    data['basket_payload'] = this.basketPayload;
    return data;
  }
}

class CurrentSku {
  String? imageAltText;
  bool? isAppExclusive;
  bool? isBI;
  bool? isLimitedEdition;
  bool? isLimitedTimeOffer;
  bool? isNew;
  bool? isOnlineOnly;
  bool? isSephoraExclusive;
  String? listPrice;
  String? skuId;
  String? skuType;
  String? salePrice;
  String? valuePrice;

  CurrentSku(
      {this.imageAltText,
      this.isAppExclusive,
      this.isBI,
      this.isLimitedEdition,
      this.isLimitedTimeOffer,
      this.isNew,
      this.isOnlineOnly,
      this.isSephoraExclusive,
      this.listPrice,
      this.skuId,
      this.skuType,
      this.salePrice,
      this.valuePrice});

  CurrentSku.fromJson(Map<String, dynamic> json) {
    imageAltText = json['imageAltText'];
    isAppExclusive = json['isAppExclusive'];
    isBI = json['isBI'];
    isLimitedEdition = json['isLimitedEdition'];
    isLimitedTimeOffer = json['isLimitedTimeOffer'];
    isNew = json['isNew'];
    isOnlineOnly = json['isOnlineOnly'];
    isSephoraExclusive = json['isSephoraExclusive'];
    listPrice = json['listPrice'];
    skuId = json['skuId'];
    skuType = json['skuType'];
    salePrice = json['salePrice'];
    valuePrice = json['valuePrice'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['imageAltText'] = this.imageAltText;
    data['isAppExclusive'] = this.isAppExclusive;
    data['isBI'] = this.isBI;
    data['isLimitedEdition'] = this.isLimitedEdition;
    data['isLimitedTimeOffer'] = this.isLimitedTimeOffer;
    data['isNew'] = this.isNew;
    data['isOnlineOnly'] = this.isOnlineOnly;
    data['isSephoraExclusive'] = this.isSephoraExclusive;
    data['listPrice'] = this.listPrice;
    data['skuId'] = this.skuId;
    data['skuType'] = this.skuType;
    data['salePrice'] = this.salePrice;
    data['valuePrice'] = this.valuePrice;
    return data;
  }
}

class Refinements {
  String? displayName;
  String? type;
  List<Values>? values;

  Refinements({this.displayName, this.type, this.values});

  Refinements.fromJson(Map<String, dynamic> json) {
    displayName = json['displayName'];
    type = json['type'];
    if (json['values'] != null) {
      values = <Values>[];
      json['values'].forEach((v) {
        values!.add(new Values.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['displayName'] = this.displayName;
    data['type'] = this.type;
    if (this.values != null) {
      data['values'] = this.values!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Values {
  String? refinementValue;
  String? refinementValueDisplayName;
  int? refinementValueStatus;
  int? count;

  Values(
      {this.refinementValue,
      this.refinementValueDisplayName,
      this.refinementValueStatus,
      this.count});

  Values.fromJson(Map<String, dynamic> json) {
    refinementValue = json['refinementValue'];
    refinementValueDisplayName = json['refinementValueDisplayName'];
    refinementValueStatus = json['refinementValueStatus'];
    count = json['count'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['refinementValue'] = this.refinementValue;
    data['refinementValueDisplayName'] = this.refinementValueDisplayName;
    data['refinementValueStatus'] = this.refinementValueStatus;
    data['count'] = this.count;
    return data;
  }
}
